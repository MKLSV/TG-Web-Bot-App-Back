const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');

const token = '7807455574:AAHd0hfHtP9smCnuoYK2zAGRRCEGEviVByw';
const webAppUrl = 'https://tg-web-bot-app-react.vercel.app';

const bot = new TelegramBot(token, { polling: true });
const app = express()

app.use(express.json())
app.use(cors())

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–∞–¥–µ–Ω–∏–π
bot.on('polling_error', (error) => {
    console.log(`Polling error: ${error.message}`);
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text || '';

    try {
        if (text === '/start') {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await bot.sendMessage(chatId, '–ù–∏–∂–µ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞, –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É', {
                reply_markup: {
                    keyboard: [
                        [{
                            text: 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É',
                            web_app: { url: `${webAppUrl}/form` }
                        }]
                    ],
                    resize_keyboard: true // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                }
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
            await bot.sendMessage(chatId, '–ó–∞—Ö–æ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:', {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: 'üõçÔ∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑',
                            web_app: { url: `${webAppUrl}` } // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL
                        }]
                    ]
                }
            });
        }
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        else if (msg.web_app_data && msg.web_app_data.data) {
            const data = JSON.parse(msg.web_app_data.data);
            console.log('Received form data:', data);

            await bot.sendMessage(chatId, '‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã!');

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            await new Promise(resolve => setTimeout(resolve, 500));
            await bot.sendMessage(chatId, `üè≥Ô∏è –°—Ç—Ä–∞–Ω–∞: ${data.country || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);

            await new Promise(resolve => setTimeout(resolve, 1000));
            await bot.sendMessage(chatId, `üè† –£–ª–∏—Ü–∞: ${data.street || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);

            await new Promise(resolve => setTimeout(resolve, 1500));
            await bot.sendMessage(chatId, `‚ÑπÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã`);
        }
    } catch (error) {
        console.error('Error processing message:', error);
        bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
    }
});

console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');

app.post('/web-data', async (req, res) => {
    const { queryId, products, totalPrice } = req.body
    console.log("ok")
    console.log(totalPrice)
    try {
        await bot.answerWebAppQuery(queryId, {
            type: 'article',
            id: queryId,
            title: '–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
            input_message_content: {message_text: '–ü–æ–∑–¥—Ä–æ–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π, –≤—ã –ø—Ä–µ–æ–±—Ä–µ–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞ —Å—É–º–º—É ' + totalPrice + ',–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∫—É–ø–∏–ª–∏: ' + products}
        })
        return res.status(200).json({})
        
        
    } catch (error) {
        await bot.answerWebAppQuery(queryId, {
            type: 'article',
            id: queryId,
            title: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É',
            input_message_content: {message_text: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É'}
        })
        return res.status(500).json({})
    }
})


const PORT = 8000
app.listen(PORT, console.log('server started on PORT ' + PORT))